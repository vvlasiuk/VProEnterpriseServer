import json
import os
from typing import Dict, Optional
from fastapi import Request

class Localization:
    def __init__(self):
        self.translations: Dict[str, Dict] = {}
        self.default_lang = "uk"
        self.current_lang = "uk"  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞
        self.load_translations()
    
    def load_translations(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó"""
        # –®–ª—è—Ö –¥–æ –ø–∞–ø–∫–∏ lang –≤—ñ–¥–Ω–æ—Å–Ω–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ñ–∞–π–ª—É
        current_dir = os.path.dirname(os.path.abspath(__file__))
        lang_dir = os.path.join(current_dir, "..", "lang")
        
        if not os.path.exists(lang_dir):
            print(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ {lang_dir} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
            return
        
        for file_name in os.listdir(lang_dir):
            if file_name.endswith('.json'):
                lang_code = file_name.replace('.json', '')
                file_path = os.path.join(lang_dir, file_name)
                
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        self.translations[lang_code] = json.load(f)
                        print(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –º–æ–≤—É: {lang_code}")
                except Exception as e:
                    print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è {file_path}: {e}")
    
    def get(self, key: str, category: str = "common", lang: Optional[str] = None) -> str:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥—É –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é"""
        lang = lang or self.current_lang
        
        # –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –º–æ–≤—É
        if (lang in self.translations and 
            category in self.translations[lang] and 
            key in self.translations[lang][category]):
            return self.translations[lang][category][key]
        
        # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ - —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –º–æ–≤—É –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        if (self.default_lang in self.translations and 
            category in self.translations[self.default_lang] and 
            key in self.translations[self.default_lang][category]):
            return self.translations[self.default_lang][category][key]
        
        # –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ - –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –∫–ª—é—á
        return f"{category}.{key}"
    
    def set_language(self, lang: str):
        """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –º–æ–≤–∏"""
        if lang in self.translations:
            self.current_lang = lang
            print(f"üåç –ú–æ–≤–∞ –∑–º—ñ–Ω–µ–Ω–∞ –Ω–∞: {lang}")
        else:
            print(f"‚ö†Ô∏è –ú–æ–≤–∞ {lang} –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è")
    
    def get_from_request(self, request: Request) -> str:
        lang = request.path_params.get("lang", self.default_lang)
        
        # –ü—Ä–æ—Å—Ç–∏–π –ø–∞—Ä—Å–∏–Ω–≥ Accept-Language
        if "uk" in lang.lower():
            return "uk"
        else:
            return "en"
    
    def get_available_languages(self) -> list:
        """–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º–æ–≤"""
        return list(self.translations.keys())
    
    def get_current_language(self) -> str:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –º–æ–≤–∏"""
        return self.current_lang
    
# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±'—î–∫—Ç –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó
i18n = Localization()